import Network.CGI
import Graphics.WordCloud
import Graphics.GD
import Text.XHtml.Strict
import Data.Maybe
import Control.Monad

maxLen = 10000

main = runCGI (handleErrors main') where
    main' = do
      page <- getInput "p"
      case page of
        Nothing        -> startPage []
        Just "options" -> optionsPage

startPage :: [CGIInput] -> Page
startPage badInputs = do
  output "Start page."

optionsPage :: Page
optionsPage = do
  inputs <- getValidInputs [inputRequest "text" "Cloud text" validText]
  either startPage optionsPage' inputs

optionsPage' :: [CGIInput] -> Page
optionsPage' inputs = do
  output "Success. Next part."

type Page = CGI CGIResult

-- Validators
--

-- Validates the text used to create the word cloud.
validText :: InputValidator
validText t | tooLong   = Left  $ "Longer than " ++ show maxLen ++ " chars."
            | otherwise = Right $ t
            where tooLong = length (take (maxLen+1) t) > maxLen

-- Validation code
--

getValidInputs :: [InputRequest] -> CGI [CGIInput]
getValidInputs = mapM tryValidate where
    tryValidate :: (Name,Desc,InputValidator) -> CGI CGIInput
    tryValidate (name,desc,validate) = do 
      value <- liftM (fromMaybe "") $ getInput name
      return (name,desc,validate value)

inputRequest :: String -> String -> InputValidator -> InputRequest
inputRequest = (,,)

type InputRequest = (Name,Desc,InputValidator)
type InputValidator = Value -> Either Err Value
type CGIInput = (Name,Desc,Either Err Value)
type Name  = String
type Desc  = String
type Value = String
type Err   = String
